syntax = "proto3";

// Clients connect to multiple brokers,
//  c - ClientHello -> b : Announce client capabilites to broker
//  c <- ServerHello - b : Announce client capabilites to client



message HttpHeader {
    string key = 1;
    string value = 2;
}

message HttpReqMeta {
    string method = 1;
    string request_url = 2;
    repeated HttpHeader headers = 3;
}


message HttpRespMeta {
    int32 status_code = 1;
    repeated HttpHeader headers = 2;
}

// C2S client is going to shut down of its own volition - please stop sending me stuff
message GoByeBye {

}

// S2C request that you please shutdown that function
message CancelCall {
    string call_id = 1;
}

// S2C ok boys - here's a call
message StartCall {
    string call_id = 1;

    string image = 2;
    string route = 3;
    string app = 4;
    string tenant = 5;


    map<string, string> container_config = 6;
    bool has_input = 7;
    string content_type = 8;

    string format = 9;
    string type = 10;

    int32 timeout = 11;
    int32 idle_timeout = 12;

    uint64 memory = 13;


    oneof proto {
        HttpReqMeta http = 100;
    }

}

// S2C and C2S exchange  blob of data for a fn or log
message DataFrame {
    string call_id = 1;
    bytes data = 2;
    bool eof = 3;
}

// C2S Call has started to finish - data might not be here yet
message CallResponse {
    string call_id = 1;
    bool eof = 2;
    string content_type = 3;
    oneof meta {
        HttpRespMeta http = 100;
    }
}

// C2S call is really done - nothing more to see here for this call
message CallComplete {
    string call_id = 1;
    string error = 2;

}

message ResourceAnnounce {
    double mem_used = 1;
    double cpu_used = 2;
    bytes image_state = 3;
    bytes hot_state = 4;
}

// C2S - Always sent as the first message by the client
// if
message ClientHello {
    string client_version = 1;
    string binding = 2;
    //    int64 ram = 2;
    //    int64 cores = 3;
    // caps?
}

message ServerHello {
    string server_version = 1;
}

message ClientMsg {
    oneof body {
        CallResponse call_respond = 1;
        CallComplete call_complete = 2;
        DataFrame data = 3;
        DataFrame log = 4;
        ClientHello hello = 5;
        GoByeBye go_bye_bye = 6;
    }
}

message ServerMsg {
    oneof body {
        StartCall start_call = 1;
        DataFrame data = 2;
        ServerHello server_hello = 3;
    }
}

service Broker {
    rpc Engage (stream ClientMsg) returns (stream ServerMsg);
}

//
//message DiscoRequest {
//}
//
//message DiscoResponse {
//    repeated string urls = 1;
//}
//
//service Disco {
//    rpc Discover (DiscoRequest) returns (DiscoResponse);
//}